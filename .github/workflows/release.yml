name: Release

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check Swift version
      run: |
        swift --version
        xcode-select -p
    
    - name: Cache Swift packages
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Build PopZeit with verbose output
      run: |
        echo "Starting build process..."
        
        # Clean previous builds
        rm -rf .build build
        mkdir -p build
        
        # Build with verbose output and timeout
        echo "Building with Swift Package Manager..."
        timeout 600 swift build -c release -v || {
          echo "Build timed out or failed!"
          echo "Checking for common issues..."
          ls -la
          echo "Swift version:"
          swift --version
          echo "Available Xcode versions:"
          ls /Applications/ | grep -i xcode || echo "No Xcode found"
          exit 1
        }
        
        # Check if build was successful
        EXECUTABLE_PATH=".build/release/PopZeit"
        if [ ! -f "$EXECUTABLE_PATH" ]; then
            echo "Build failed - executable not found at $EXECUTABLE_PATH"
            ls -la .build/release/ || echo "Release directory not found"
            exit 1
        fi
        
        echo "Build successful! Creating app bundle..."
        
        # Create app bundle structure
        APP_BUNDLE="build/PopZeit.app"
        mkdir -p "$APP_BUNDLE/Contents/MacOS"
        mkdir -p "$APP_BUNDLE/Contents/Resources"
        
        # Copy executable to bundle
        cp "$EXECUTABLE_PATH" "$APP_BUNDLE/Contents/MacOS/"
        chmod +x "$APP_BUNDLE/Contents/MacOS/PopZeit"
        
        # Copy Info.plist
        cp PopZeit/Info.plist "$APP_BUNDLE/Contents/"
        
        # Copy entitlements (for reference)
        cp PopZeit/PopZeit.entitlements "$APP_BUNDLE/Contents/"
        
        # Copy app icon and resources
        echo "Copying app icon and resources..."
        cp PopZeit/Resources/PopZeit.icns "$APP_BUNDLE/Contents/Resources/"
        cp PopZeit/Resources/PopZeit.png "$APP_BUNDLE/Contents/Resources/"
        
        # Make the app executable
        chmod -R 755 "$APP_BUNDLE"
        
        echo "App bundle created successfully!"
        
        # Extract version from Info.plist and create ZIP
        VERSION=$(plutil -extract CFBundleShortVersionString raw "$APP_BUNDLE/Contents/Info.plist")
        echo "Detected version: $VERSION"
        
        # Create ZIP archive for distribution
        echo "Creating ZIP archive for distribution..."
        cd build
        ZIP_NAME="PopZeit-${VERSION}.zip"
        zip -r "$ZIP_NAME" PopZeit.app
        cd ..
        
        echo "ZIP archive created: build/$ZIP_NAME"
        ls -la build/
      timeout-minutes: 15
        
    - name: Get version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Version: ${VERSION}"
        
    - name: Verify ZIP file
      run: |
        ls -la build/
        if [ ! -f "build/PopZeit-${{ steps.get_version.outputs.version }}.zip" ]; then
          echo "Expected ZIP file not found!"
          exit 1
        fi
        
    - name: Calculate SHA256
      id: calculate_sha
      run: |
        SHA256=$(shasum -a 256 "build/PopZeit-${{ steps.get_version.outputs.version }}.zip" | cut -d' ' -f1)
        echo "sha256=${SHA256}" >> $GITHUB_OUTPUT
        echo "SHA256: ${SHA256}"
        
    - name: Upload ZIP to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./build/PopZeit-${{ steps.get_version.outputs.version }}.zip
        asset_name: PopZeit-${{ steps.get_version.outputs.version }}.zip
        asset_content_type: application/zip
        
    - name: Update release description with SHA256
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const release = await github.rest.repos.getRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ github.event.release.id }}
          });
          
          const currentBody = release.data.body || '';
          const sha256Info = `\n\n## SHA256 Checksums\n\n\`PopZeit-${{ steps.get_version.outputs.version }}.zip\`: \`${{ steps.calculate_sha.outputs.sha256 }}\`\n\n## Homebrew Cask\n\nTo update the Homebrew Cask formula, use:\n- Version: \`${{ steps.get_version.outputs.version }}\`\n- SHA256: \`${{ steps.calculate_sha.outputs.sha256 }}\``;
          
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ github.event.release.id }},
            body: currentBody + sha256Info
          });